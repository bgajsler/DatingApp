****************************************************************************************
    Add BOOTSTRAP 4.x to install boostrap
****************************************************************************************
npm install boostrap font-awesome
add styles to general src/styles.css
/* You can add global styles to this file, and also import other style files */
@import '../node_modules/bootstrap/dist/css/bootstrap.min.css';
@import '../node_modules/font-awesome/css/font-awesome.min.css';

****************************************************************************************
    DOTNET EF MIGRATIONS
****************************************************************************************
dotnet ef -h
// creates ef migrations model
dotnet ef migrations add InitialCreate  
dotnet ef database update

// update EntityFrameworkCore tools!
Install-Package Microsoft.EntityFrameworkCore.Tools -RequiredVersion 2.1.4


****************************************************************************************
    nuget
****************************************************************************************
// Install client tools

https://docs.microsoft.com/en-us/nuget/install-nuget-client-tools#visual-studio


****************************************************************************************
    Install angular/cli https://cli.angular.io
****************************************************************************************
npm install -g @angular/cli@6.2.6

//create project structure
ng new DatingApp-SPA

// start project
ng serve
!!! Will not work if you user symbolic links for paths! (e.g. c:\Users\bgajsler\Learning does not work!. It works from c:\Work\Sandbox\Learning)

// e2e ... folder for end2end testing
// angular.js ... settings used by webpack

// Install CORS in Startup.cs (No 'Access-Control-Allow-Origin' header is present on the requested resource.)
 services.AddCors(); // into ConfigureServices() method
 app.UseCors(x => x.AllowAnyOrigin().AllowAnyMethod().AllowAnyHeader());

// Install Bootstrap & Font-Awesome
npm install bootstrap font-awesome
//Add the following lines to styles.css
/* You can add global styles to this file, and also import other style files */
@import '../node_modules/bootstrap/dist/css/bootstrap.min.css';
@import '../node_modules/font-awesome/css/font-awesome.min.css';

// Initialize GIT repository
git status  // get git status in git repository
git init // initialize git repository
git remote add origin https://github.com/bgajsler/DatingApp.git
git pull origin master --allow-unrelated-histories // if containers were not merged before
git push -u origin master



*****************************************************************************************************
    Security
*****************************************************************************************************
// Hash Password with SHA512 and add a salt
// Random SALT ( Hash + Salt )

// add users update to .NET Migrations
dotnet ef migrations add AddedUserEntity
dotnet ef database update

// services.AddSingleton ... creates single instance, not so good with concurrent services
// services.AddTransient ... create for each requested
// services.AddScoped    ... on instance per request, but same instance for session!

// Create DTO ... DataTransferObject

// we change the controllerto support the basic apo: change Controller base class with ControllerBase
-----------------------------------------------------------------------------------------------------------------------
// TOKEN AUTHENTICATION
// JWT ... Jason Web Tokens .. industry standardm self-contained and can contain Credentials, Claims, Other information
// JWT structure (header, payload, secret)
-----------------------------------------------------------------------------------------------------------------------

go to https://jwt.io
past the token for content
eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxIiwidW5pcXVlX25hbWUiOiJqb2huIiwibmJmIjoxNTQwNzQ5NDQ1LCJleHAiOjE1NDA4MzU4NDQsImlhdCI6MTU0MDc0OTQ0NX0.f2njAOYqbxh6I9Hm_S7VcC6tUfpBAj6kbCumusGEgvoV6-f8TiMKd5LXaBeNFoMCjGeGHg2psrXd6OEjqzodsQ

// send the authorized request by adding 
"Authorization" key to request and the value must begin with Bearer followed by empty space and token 
(e.g. "Bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxIiwidW5pcXVlX25hbWUiOiJqb2huIiwibmJmIjoxNTQwNzUxMzk2LCJleHAiOjE1NDA4Mzc3OTYsImlhdCI6MTU0MDc1MTM5Nn0.u_flH9x_ek-4mCEuUDF7TzoS71TATA5ubkrwOmo8c9m1m4_OqVUw2wSr1edP83jYEV3iBBLGl3jI94E7-eAIsA")



*****************************************************************************************************
    Client side login and register
*****************************************************************************************************
2 types of forms 
 A> template forms
 B> reactive forms

 TEMPLATE FORMS
 define names in html tags =>
  #loginForm="ngForm" or #username="ngModel"
  2way databinding [(ngModel)]="model.username" d

FORM AND FIELD
<pre>
  Form Valid: {{loginForm.valid}}
  Form Touched: {{loginForm.touched}}
  Form Dirty: {{loginForm.dirty}}
  Form Values: {{loginForm.value | json}}
  Username Valid: {{username.valid}}
  Username Touched: {{username.touched}}
  Username Dirty: {{username.dirty}}
  Username Value: {{username.value}}
  Password Valid: {{password.valid}}
  Password Touched: {{password.touched}}
  Password Dirty: {{password.dirty}}
  Password Value: {{password.value}}
</pre>

*****************************************************************************************************
    ADD ANGULAR SERVICE REPOSITORY
*****************************************************************************************************

*****************************************************************************************************
    Add Input and Output parameters
*****************************************************************************************************
// *.ts
@Input() valuesFromHome: any;
@Output() cancelRegister = new EventEmmiter;
// *.html
<app-register [valuesFromHome]="values" (cancelRegister)="cancelRegisterMode($evente)"></app-register>
